{"version":3,"sources":["Components/NavBar.js","Components/Card.js","Components/Main.js","Components/App.js","serviceWorker.js","index.js"],"names":["MenuExampleSecondary","state","activeItem","handleItemClick","e","name","setState","this","Menu","inverted","stackable","Item","active","onClick","position","Input","icon","placeholder","Component","extra","Icon","CardExampleCardProps","Card","image","header","meta","description","raised","fluid","Main","Container","Grid","columns","centered","Row","Column","Reveal","animated","Content","visible","hidden","Image","src","size","bordered","rounded","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4RAGqBA,E,4MACjBC,MAAQ,CAAEC,WAAY,Q,EAEtBC,gBAAkB,SAACC,EAAD,OAAMC,EAAN,EAAMA,KAAN,OAAiB,EAAKC,SAAS,CAAEJ,WAAYG,K,uDAErD,IACEH,EAAeK,KAAKN,MAApBC,WAER,OACI,kBAACM,EAAA,EAAD,CAAMC,UAAQ,EAACC,WAAS,GACpB,kBAACF,EAAA,EAAKG,KAAN,CACIN,KAAK,OACLO,OAAuB,SAAfV,EACRW,QAASN,KAAKJ,kBAElB,kBAACK,EAAA,EAAKG,KAAN,CACIN,KAAK,WACLO,OAAuB,aAAfV,EACRW,QAASN,KAAKJ,kBAElB,kBAACK,EAAA,EAAKG,KAAN,CACIN,KAAK,UACLO,OAAuB,YAAfV,EACRW,QAASN,KAAKJ,kBAElB,kBAACK,EAAA,EAAKA,KAAN,CAAWM,SAAS,SAChB,kBAACN,EAAA,EAAKG,KAAN,KACI,kBAACI,EAAA,EAAD,CAAOC,KAAK,SAASC,YAAY,qB,GA3BPC,a,qDCA5CC,EACF,2BACI,kBAACC,EAAA,EAAD,CAAMf,KAAK,SADf,cAkBWgB,EAZc,kBACzB,kBAACC,EAAA,EAAD,CACIC,MAAM,+IACNC,OAAO,eACPC,KAAK,SACLC,YAAY,qGACZP,MAAOA,EACPQ,QAAM,EAACC,OAAK,KC0BLC,EAtCF,kBACT,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMrB,WAAS,EAACsB,QAAS,EAAGC,UAAQ,GAChC,kBAACF,EAAA,EAAKG,IAAN,KACI,kBAACH,EAAA,EAAKI,OAAN,KACI,kBAACC,EAAA,EAAD,CAAQC,SAAS,cACb,kBAACD,EAAA,EAAOE,QAAR,CAAgBC,SAAO,GACnB,kBAAC,EAAD,OAEJ,kBAACH,EAAA,EAAOE,QAAR,CAAgBE,QAAM,GAClB,kBAACC,EAAA,EAAD,CAAOC,IAAI,sGAAsGC,KAAK,QAAQC,UAAQ,EAACC,SAAO,OAI1J,kBAACd,EAAA,EAAKI,OAAN,KACI,kBAAC,EAAD,OAEJ,kBAACJ,EAAA,EAAKI,OAAN,KACI,kBAAC,EAAD,QAIR,kBAACJ,EAAA,EAAKG,IAAN,KACI,kBAACH,EAAA,EAAKI,OAAN,KACI,kBAAC,EAAD,OAEJ,kBAACJ,EAAA,EAAKI,OAAN,KACI,kBAAC,EAAD,OAEJ,kBAACJ,EAAA,EAAKI,OAAN,KAEI,kBAAC,EAAD,WCbLW,MAff,WACI,OAEQ,qDAEI,6BACA,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,QCJIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4cce53a0.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Input, Menu } from 'semantic-ui-react'\r\n\r\nexport default class MenuExampleSecondary extends Component {\r\n    state = { activeItem: 'home' }\r\n\r\n    handleItemClick = (e, { name }) => this.setState({ activeItem: name })\r\n\r\n    render() {\r\n        const { activeItem } = this.state\r\n\r\n        return (\r\n            <Menu inverted stackable>\r\n                <Menu.Item\r\n                    name='home'\r\n                    active={activeItem === 'home'}\r\n                    onClick={this.handleItemClick}\r\n                />\r\n                <Menu.Item\r\n                    name='messages'\r\n                    active={activeItem === 'messages'}\r\n                    onClick={this.handleItemClick}\r\n                />\r\n                <Menu.Item\r\n                    name='friends'\r\n                    active={activeItem === 'friends'}\r\n                    onClick={this.handleItemClick}\r\n                />\r\n                <Menu.Menu position='right'>\r\n                    <Menu.Item>\r\n                        <Input icon='search' placeholder='Search...' />\r\n                    </Menu.Item>\r\n                </Menu.Menu>\r\n            </Menu>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { Card, Icon } from 'semantic-ui-react'\r\n\r\nconst extra = (\r\n    <a>\r\n        <Icon name='user' />\r\n    16 Friends\r\n    </a>\r\n)\r\n\r\nconst CardExampleCardProps = () => (\r\n    <Card\r\n        image='https://vignette.wikia.nocookie.net/characterprofile/images/a/a6/Broly_artwork.png/revision/latest/scale-to-width-down/340?cb=20190515183751'\r\n        header='Elliot Baker'\r\n        meta='Friend'\r\n        description='Elliot is a sound engineer living in Nashville who enjoys playing guitar and hanging with his cat.'\r\n        extra={extra}\r\n        raised fluid\r\n    />\r\n\r\n)\r\n\r\nexport default CardExampleCardProps\r\n","import React from 'react'\r\nimport { Grid, Container, Reveal, Image } from 'semantic-ui-react';\r\nimport Card from './Card';\r\n\r\n\r\nconst Main = () => (\r\n    <Container>\r\n        <Grid stackable columns={3} centered>\r\n            <Grid.Row>\r\n                <Grid.Column>\r\n                    <Reveal animated='move right'>\r\n                        <Reveal.Content visible>\r\n                            <Card />\r\n                        </Reveal.Content>\r\n                        <Reveal.Content hidden>\r\n                            <Image src='https://static1.srcdn.com/wordpress/wp-content/uploads/2019/06/Broly-in-Dragon-Ball-Super-Broly.jpg' size='small' bordered rounded />\r\n                        </Reveal.Content>\r\n                    </Reveal>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                    <Card />\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                    <Card />\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n\r\n            <Grid.Row>\r\n                <Grid.Column>\r\n                    <Card />\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                    <Card />\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n\r\n                    <Card />\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n        </Grid>\r\n    </Container>\r\n)\r\n\r\nexport default Main;","import React from 'react';\n\n//import { Provider } from 'react-redux';\n//import store from './Store/store';\n\nimport NavBar from './NavBar';\nimport Main from './Main';\n\nfunction App() {\n    return (\n        //<Provider store={store}>\n            <div>\n                rendering from app.js\n                <br />\n                <NavBar />\n                <br />\n                <Main />\n\n            </div>\n        //</Provider>\n        );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}